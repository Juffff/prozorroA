{"version":3,"sources":["../../client/FileSaver.js"],"names":["saveAs","view","navigator","test","userAgent","doc","document","get_URL","URL","webkitURL","save_link","createElementNS","can_use_save_link","click","node","event","MouseEvent","dispatchEvent","is_safari","HTMLElement","safari","is_chrome_ios","setImmediate","setTimeout","throw_outside","ex","force_saveable_type","arbitrary_revoke_timeout","revoke","file","revoker","revokeObjectURL","remove","dispatch","filesaver","event_types","concat","i","length","listener","call","auto_bom","blob","type","Blob","String","fromCharCode","FileSaver","name","no_auto_bom","force","object_url","dispatch_all","split","fs_error","FileReader","reader","onloadend","url","result","replace","popup","open","location","href","undefined","readyState","DONE","readAsDataURL","INIT","createObjectURL","opened","download","FS_proto","prototype","msSaveOrOpenBlob","abort","WRITING","error","onwritestart","onprogress","onwrite","onabort","onerror","onwriteend","self","window"],"mappings":"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","file":"FileSaver.js","sourcesContent":["/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.8\n * 2018-03-22 14:03:47\n *\n * By Eli Grey, https://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js */\n\nexport var saveAs = saveAs || (function(view) {\n    \"use strict\";\n    // IE <10 is explicitly unsupported\n    if (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n        return;\n    }\n    var\n        doc = view.document\n        // only get URL when necessary in case Blob.js hasn't overridden it yet\n        , get_URL = function() {\n            return view.URL || view.webkitURL || view;\n        }\n        , save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n        , can_use_save_link = \"download\" in save_link\n        , click = function(node) {\n            var event = new MouseEvent(\"click\");\n            node.dispatchEvent(event);\n        }\n        , is_safari = /constructor/i.test(view.HTMLElement) || view.safari\n        , is_chrome_ios =/CriOS\\/[\\d]+/.test(navigator.userAgent)\n        , setImmediate = view.setImmediate || view.setTimeout\n        , throw_outside = function(ex) {\n            setImmediate(function() {\n                throw ex;\n            }, 0);\n        }\n        , force_saveable_type = \"application/octet-stream\"\n        // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n        , arbitrary_revoke_timeout = 1000 * 40 // in ms\n        , revoke = function(file) {\n            var revoker = function() {\n                if (typeof file === \"string\") { // file is an object URL\n                    get_URL().revokeObjectURL(file);\n                } else { // file is a File\n                    file.remove();\n                }\n            };\n            setTimeout(revoker, arbitrary_revoke_timeout);\n        }\n        , dispatch = function(filesaver, event_types, event) {\n            event_types = [].concat(event_types);\n            var i = event_types.length;\n            while (i--) {\n                var listener = filesaver[\"on\" + event_types[i]];\n                if (typeof listener === \"function\") {\n                    try {\n                        listener.call(filesaver, event || filesaver);\n                    } catch (ex) {\n                        throw_outside(ex);\n                    }\n                }\n            }\n        }\n        , auto_bom = function(blob) {\n            // prepend BOM for UTF-8 XML and text/* types (including HTML)\n            // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n            if (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n                return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});\n            }\n            return blob;\n        }\n        , FileSaver = function(blob, name, no_auto_bom) {\n            if (!no_auto_bom) {\n                blob = auto_bom(blob);\n            }\n            // First try a.download, then web filesystem, then object URLs\n            var\n                filesaver = this\n                , type = blob.type\n                , force = type === force_saveable_type\n                , object_url\n                , dispatch_all = function() {\n                    dispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n                }\n                // on any filesys errors revert to saving with object URLs\n                , fs_error = function() {\n                    if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n                        // Safari doesn't allow downloading of blob urls\n                        var reader = new FileReader();\n                        reader.onloadend = function() {\n                            var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n                            var popup = view.open(url, '_blank');\n                            if(!popup) view.location.href = url;\n                            url=undefined; // release reference before dispatching\n                            filesaver.readyState = filesaver.DONE;\n                            dispatch_all();\n                        };\n                        reader.readAsDataURL(blob);\n                        filesaver.readyState = filesaver.INIT;\n                        return;\n                    }\n                    // don't create more object URLs than needed\n                    if (!object_url) {\n                        object_url = get_URL().createObjectURL(blob);\n                    }\n                    if (force) {\n                        view.location.href = object_url;\n                    } else {\n                        var opened = view.open(object_url, \"_blank\");\n                        if (!opened) {\n                            // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n                            view.location.href = object_url;\n                        }\n                    }\n                    filesaver.readyState = filesaver.DONE;\n                    dispatch_all();\n                    revoke(object_url);\n                }\n            ;\n            filesaver.readyState = filesaver.INIT;\n\n            if (can_use_save_link) {\n                object_url = get_URL().createObjectURL(blob);\n                setImmediate(function() {\n                    save_link.href = object_url;\n                    save_link.download = name;\n                    click(save_link);\n                    dispatch_all();\n                    revoke(object_url);\n                    filesaver.readyState = filesaver.DONE;\n                }, 0);\n                return;\n            }\n\n            fs_error();\n        }\n        , FS_proto = FileSaver.prototype\n        , saveAs = function(blob, name, no_auto_bom) {\n            return new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n        }\n    ;\n\n    // IE 10+ (native saveAs)\n    if (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n        return function(blob, name, no_auto_bom) {\n            name = name || blob.name || \"download\";\n\n            if (!no_auto_bom) {\n                blob = auto_bom(blob);\n            }\n            return navigator.msSaveOrOpenBlob(blob, name);\n        };\n    }\n\n    // todo: detect chrome extensions & packaged apps\n    //save_link.target = \"_blank\";\n\n    FS_proto.abort = function(){};\n    FS_proto.readyState = FS_proto.INIT = 0;\n    FS_proto.WRITING = 1;\n    FS_proto.DONE = 2;\n\n    FS_proto.error =\n        FS_proto.onwritestart =\n            FS_proto.onprogress =\n                FS_proto.onwrite =\n                    FS_proto.onabort =\n                        FS_proto.onerror =\n                            FS_proto.onwriteend =\n                                null;\n\n    return saveAs;\n}(\n    typeof self !== \"undefined\" && self\n    || typeof window !== \"undefined\" && window\n    || this\n));"]}