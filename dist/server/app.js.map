{"version":3,"sources":["../../server/app.js"],"names":["console","log","path","resolve","logx","__dirname","join"],"mappings":";;AAAA;;;;;;AACAA,QAAQC,GAAR,CAAYC,eAAKC,OAAL,EAAZ;AACAH,QAAQI,IAAR,CAAaC,SAAb;AACAL,QAAQC,GAAR,CAAYC,eAAKI,IAAL,CAAUD,SAAV,EAAqB,OAArB,EAA8B,SAA9B,EAAyC,IAAzC,CAAZ;AACAL,QAAQC,GAAR,CAAYC,eAAKI,IAAL,CAAUD,SAAV,EAAqB,OAArB,EAA8B,YAA9B,CAAZ;AACAL,QAAQC,GAAR,CAAYC,eAAKC,OAAL,CAAaE,SAAb,EAAwB,OAAxB,EAAiC,YAAjC,CAAZ;AACAL,QAAQC,GAAR,CAAYC,eAAKC,OAAL,CAAa,OAAb,EAAsB,YAAtB,CAAZ;AACA","file":"app.js","sourcesContent":["import path from 'path';\nconsole.log(path.resolve());\nconsole.logx(__dirname);\nconsole.log(path.join(__dirname, 'utils', 'dbutils', 'js'));\nconsole.log(path.join(__dirname, 'utils', 'dbutils.js'));\nconsole.log(path.resolve(__dirname, 'utils', 'dbutils.js'));\nconsole.log(path.resolve('utils', 'dbutils.js'));\n/*\nimport path from 'path';\n/!*console.log(JSON.parse(document.getElementsByTagName('pre')[0].innerHTML))*!/\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport got from 'got';\nimport cron from 'node-cron';\nimport * as db from './utils/dbUtils.js';\nimport itemIdEnum from './enums/item_id.js';\nimport tenderStatusEnum from './enums/tender_status.js';\nimport logger from './utils/logger.js';\nimport errorHandler from \"./errorHandler.js\";\nimport config from \"./config/config.js\";\nimport serve from 'express-static';\n\n\ndb.connect();\nconst corsOptions = {\n    origin: '*',\n    optionsSuccessStatus: 200, // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\nfunction pause(seconds) {\n    const waitTill = new Date(new Date().getTime() + seconds * 1000);\n    while (waitTill > new Date()) {\n    }\n}\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors(corsOptions));\n\n\nlet startUri = config.startUri;\nconst apiPrefix = config.prefix;\n\nprocess.on('uncaughtException', function (err) {\n    logger.log('error', err.stack);\n    console.error(err.stack);\n    console.log(\"Node NOT Exiting...\");\n    db.getNextURI(function (uri) {\n        if (uri) {\n            goThrowTenders(uri);\n        } else {\n            goThrowTenders(startUri);\n        }\n    });\n});\n\napp\n    .get('/start', (req, res) => {\n        db.getNextURI(function (uri) {\n            if (uri) {\n                goThrowTenders(uri);\n            } else {\n                goThrowTenders(startUri);\n            }\n            res.send(200);\n        });\n        setTimeout(function () {\n            console.log('Wake and move!');\n            db.getNextURI(function (uri) {\n                if (uri) {\n                    goThrowTenders(uri);\n                } else {\n                    goThrowTenders(startUri);\n                }\n            });\n        }, 60000);\n    })\n    .get('/start2018', (req, res) => {\n        goThrowTenders('https://public.api.openprocurement.org/api/2.4/tenders?offset=2018');\n        res.send(200);\n    })\n    .get('/update', (req, res) => {\n        db.listAllTenders(function (data) {\n            updateExistedTenders(data);\n        });\n        res.send(200);\n    })\n\n\n\n\n    .get('/tenders', (req, res) => {\n        db.listTenders({}, function (data) {\n            res.send(data);\n        })\n    })\n\n    .get('/ping', (req, res) => {\n        res.sendStatus(200);\n    });\n\napp.use('/', serve(path.join(__dirname, '..', 'client')));\n\nfunction goThrowTenders(uri) {\n    task1Hour.stop();\n    task5Min.stop();\n    console.log('uri - ', uri);\n    let milliseconds = null;\n\n    const https = require('https');\n    https.get(uri, function (res) {\n        milliseconds = new Date().getTime();\n        let str = '';\n        res.on('data', function (chunk) {\n            str += chunk;\n        });\n        res.on('end', function () {\n            const resJson = JSON.parse(str);\n            const nextUri = resJson.next_page.uri;\n            const data = resJson.data;\n            //  console.log(data.length);\n            if (data.length === 0) {\n                logger.log('info', 'goThrowTenders finished');\n                console.log('Go throw tenders finished.');\n                db.setNextURI(startUri);\n                task1Hour.start();\n                task5Min.start();\n            } else {\n                resJson.data.map(data => data.id).forEach(id => {\n                    analiseToTender(apiPrefix, id, uri);\n                });\n                db.setNextURI(nextUri);\n                goThrowTenders(nextUri);\n            }\n        });\n    });\n}\n\nfunction updateExistedTenders(data) {\n    data.forEach(tender => {\n        db.getTenderByID(tender, function (tender) {\n            analiseToTender(apiPrefix, tender._id);\n        })\n    });\n}\n\nfunction analiseToTender(prefix, id, uri) {\n    try {\n        got(`${prefix}${id}`).then(data => {\n            if (data.body) {\n                try {\n                    const allInfo = JSON.parse(data.body).data;\n                    if (allInfo) {\n                        delete allInfo.questions;\n                        delete allInfo.complaints;\n                        const tender = {};\n                        try {\n                            if (allInfo.value) {\n                                tender.amount = allInfo.value.amount;\n                                if (Number.parseInt(tender.amount, 10) > config.minAmount && Number.parseInt(tender.amount, 10) < config.maxAmount) {\n                                    tender._id = allInfo.id;\n                                    tender.name = allInfo.procuringEntity.name;\n                                    if (allInfo.auctionPeriod) {\n                                        tender.startDate = allInfo.auctionPeriod.startDate;\n                                        if (tender.startDate === undefined) {\n                                            if (allInfo.documents) {\n                                                if (Array.isArray(allInfo.documents)) {\n                                                    if (allInfo.documents[0]) {\n                                                        tender.startDate = allInfo.documents[0].datePublished;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (allInfo.enquiryPeriod) {\n                                        tender.datePublished = allInfo.enquiryPeriod.invalidationDate;\n                                    }\n                                    tender.awardCriteria = allInfo.awardCriteria;\n                                    if (allInfo.bids) {\n                                        tender.tenderers = allInfo.bids.filter(bid => {\n                                            if (bid.tenderers) {\n                                                const tenderer = bid.tenderers[0].name;\n                                                return tenderer !== null;\n                                            }\n                                            return false;\n                                        }).map(tenderer => {\n                                            return tenderer.tenderers[0].name.replace('ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ', 'ТОВ').replace('«', '\\\"').replace('»', '\\\"');\n                                        });\n                                    }\n\n                                    if (allInfo.items) {\n                                        let itemIDs = [];\n                                        let classificationIDs = [];\n\n                                        allInfo.items.forEach(item => {\n                                            if (itemIDs.indexOf(item.classification.description) === -1) {\n                                                itemIDs.push(item.classification.description);\n                                            }\n                                        });\n                                        allInfo.items.forEach(item => {\n                                            if (classificationIDs.indexOf(item.classification.id) === -1) {\n                                                classificationIDs.push(item.classification.id);\n                                            }\n                                        });\n                                        tender.items = itemIDs;\n                                        tender.classification_ids = classificationIDs;\n                                    }\n                                    tender.tenderID = allInfo.tenderID;\n                                    tender.title = allInfo.title;\n                                    tender.currency = allInfo.value.currency;\n                                    tender.status = tenderStatusEnum[allInfo.status];\n                                    if (tender.status === tenderStatusEnum['complete'] || tender.status === tenderStatusEnum['active.awarded']) {\n                                        let suppliers = [];\n                                        if (allInfo.awards) {\n                                            if (Array.isArray(allInfo.awards)) {\n                                                allInfo.awards.forEach(award => {\n                                                    if (award.suppliers) {\n                                                        if (Array.isArray(award.suppliers)) {\n                                                            award.suppliers.forEach(supplier => {\n                                                                if (suppliers.indexOf(supplier.name) === -1) {\n                                                                    suppliers.push(supplier.name);\n                                                                }\n                                                            });\n                                                        }\n                                                    }\n                                                });\n                                            }\n                                        }\n                                        tender.suppliers = suppliers;\n                                    }\n                                    if (!tender.tenderers && tender.suppliers) {\n                                        tender.tenderers = tender.suppliers;\n                                    }\n                                    let a = false;\n                                    if (tender.classification_ids) {\n                                        if (Array.isArray(tender.classification_ids)) {\n                                            tender.classification_ids.forEach(id => {\n                                                if (itemIdEnum.indexOf(id) > -1) {\n                                                    a = true;\n                                                }\n                                            });\n                                        }\n                                    }\n                                    if (a === true) {\n                                        //logger.log('info', `a tender was found - ${JSON.stringify(tender)}`);\n                                        /!*   console.log(uri);\n                                    /!*       console.log(tender);*!/!*!/\n                                        db.createTender(tender);\n                                        a = false;\n                                    }\n\n                                }\n                            }\n                            //pause(0.05);\n                        } catch (err) {\n                            console.log(allInfo.id);\n                            console.log(allInfo.tenderID);\n                            console.log(tenderStatusEnum[allInfo.status]);\n                            console.log(tender.amount);\n                            console.log(err);\n                            //pause(0.05);\n                        }\n\n                    }\n                } catch (err) {\n                    errorHandler(err);\n\n                }\n            }\n        });\n    } catch (err) {\n        console.log(err);\n    }\n\n}\n\n/!*app.listen(8080, () => {\n    console.log(`Server is running on 8080`);\n});*!/\n\napp.listen(process.env.PORT || 8080, () => {\n    if (process.env.PORT) {\n        console.log(`Server is running on ${process.env.PORT}`);\n    } else {\n        console.log(`Server is running on 8080`);\n\n    }\n});\n\n/!*cron.schedule('1-59 * * * * * ', function(){\n    console.log('sec 2');\n}, true);*!/\n\n/!*const task1Min =  cron.schedule('*!/1 * * * *', function(){\n    console.log('minute 1');\n}, false);*!/\n\nconst task5Min = cron.schedule('*!/5 * * * *', function () {\n    logger.log('info', '5MinTask started');\n    db.listAllTenders(function (data) {\n        updateExistedTenders(data);\n    });\n}, false);\n\nconst task1Hour = cron.schedule('* *!/1 * * *', function () {\n    logger.log('info', '1HourTask started');\n    db.getNextURI(function (uri) {\n        if (uri) {\n            goThrowTenders(uri);\n        } else {\n            goThrowTenders(startUri);\n        }\n    });\n    setTimeout(function () {\n        console.log('Wake and move!');\n        db.getNextURI(function (uri) {\n            if (uri) {\n                goThrowTenders(uri);\n            } else {\n                goThrowTenders(startUri);\n            }\n        });\n    }, 60000);\n\n}, false);\n\ntask5Min.start();\ntask1Hour.start();*/\n"]}